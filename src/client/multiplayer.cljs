(ns client.multiplayer)

(def opponents [{:id 0 :level (rand-int 3) :board [[:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0] [:L 0 0 0 0 0 0 0 0 0]]} 
                {:id 1 :level (rand-int 3) :board [[:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0] [:I 0 0 0 0 0 0 0 0 0]]}])

(defn opponent-scale
  "Provides the opponent boards scale"
  [cell-size]
  (let [scale 0.5] ; <- Define the scale multiplier for the opponent boards
  (* cell-size scale)))
